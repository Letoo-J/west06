<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mine.west.dao.AccountMapper">
  <resultMap id="BaseResultMap" type="com.mine.west.models.Account">
    <constructor>
      <idArg column="accountID" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="name" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="mailbox" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="password" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="nickname" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="mobilePhone" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="sex" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="avatar" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="individualitySignature" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="identity" javaType="java.lang.String" jdbcType="INTEGER"/>
      <arg column="salt" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="role" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
  </resultMap>

  <resultMap id="AccountMap" type="com.mine.west.models.Account">
    <constructor>
      <idArg column="accountID" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="name" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="mailbox" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="password" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="nickname" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="mobilePhone" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="sex" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="avatar" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="individualitySignature" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="identity" javaType="java.lang.String" jdbcType="INTEGER"/>
      <arg column="salt" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="role" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
    <!--角色信息【集合】-->
    <collection property="roles" javaType="list" ofType="com.mine.west.models.Roles">
      <id column="roleID" property="roleID"/>
      <result column="roleName" property="roleName"/>
    </collection>
  </resultMap>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from account
    where accountID = #{accountID,jdbcType=INTEGER}
  </delete>

  <insert id="insert" parameterType="com.mine.west.models.Account">
    insert into account (accountID, account.name, mailbox,
      account.password, nickname, mobilePhone,
      sex, avatar, individualitySignature,
      account.identity, salt, account.role)
    values (#{accountID,jdbcType=INTEGER}, #{name,jdbcType=CHAR}, #{mailbox,jdbcType=CHAR},
      #{password,jdbcType=CHAR}, #{nickname,jdbcType=CHAR}, #{mobilePhone,jdbcType=CHAR},
      #{sex,jdbcType=CHAR}, #{avatar,jdbcType=CHAR}, #{individualitySignature,jdbcType=VARCHAR},
      #{identity,jdbcType=INTEGER}, #{salt,jdbcType=VARCHAR}, #{role,jdbcType=VARCHAR}
      )
  </insert>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select accountID, account.name, mailbox, account.password, nickname, mobilePhone, sex, avatar,
    individualitySignature, account.identity, salt, account.role
    from account
    where accountID = #{accountID,jdbcType=INTEGER}
  </select>

  <select id="selectAll" resultMap="BaseResultMap">
    select accountID, account.name, mailbox, account.password, nickname, mobilePhone, sex, avatar,
    individualitySignature, account.identity, salt, account.role
    from account
  </select>

  <insert id="insertAccount" parameterType="com.mine.west.models.Account">
    insert into account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="accountID != null and accountID != 0">accountID,</if>
      <if test="name != null and name != ''">account.name,</if>
      <if test="mailbox != null and mailbox != ''">mailbox,</if>
      <if test="password != null and password != ''">password,</if>
      <if test="nickname != null and nickname != ''">nickname,</if>
      <if test="mobilePhone != null and mobilePhone != ''">mobilePhone,</if>
      <if test="sex != null and sex != ''">sex,</if>
      <if test="avatar != null and avatar != ''">avatar,</if>
      <if test="individualitySignature != null and individualitySignature != '' ">individualitySignature,</if>
      <if test="identity != null and identity != '' ">account.identity,</if>
      <if test="salt != null and salt != '' ">salt,</if>
      <if test="role != null and role != '' ">role,</if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="accountID != null and accountID != 0">#{accountID},</if>
      <if test="name != null and name != ''">#{name},</if>
      <if test="mailbox != null and mailbox != ''">#{mailbox},</if>
      <if test="password != null and password != ''">#{password},</if>
      <if test="nickname != null and nickname != ''">#{nickname},</if>
      <if test="mobilePhone != null and mobilePhone != ''">#{mobilePhone},</if>
      <if test="sex != null and sex != ''">#{sex},</if>
      <if test="avatar != null and avatar != ''">#{avatar},</if>
      <if test="individualitySignature != null and individualitySignature != '' ">#{individualitySignature},</if>
      <if test="identity != null and identity != '' ">#{identity},</if>
      <if test="salt != null and salt != '' ">#{salt},</if>
      <if test="role != null and role != '' ">#{role},</if>
    </trim>
  </insert>

  <update id="updateByPrimaryKey" parameterType="com.mine.west.models.Account">
    update account
    <set>
      <if test="accountID != null and accountID != 0">accountID = #{accountID},</if>
      <if test="name != null and name != ''">account.name = #{name},</if>
      <if test="mailbox != null and mailbox != ''">mailbox = #{mailbox},</if>
      <if test="password != null and password != ''">password = #{password},</if>
      <if test="nickname != null and nickname != ''">nickname = #{nickname},</if>
      <if test="mobilePhone != null and mobilePhone != ''">mobilePhone = #{mobilePhone},</if>
      <if test="sex != null and sex != ''">sex = #{sex},</if>
      <if test="avatar != null and avatar != ''">avatar = #{avatar},</if>
      <if test="individualitySignature != null and individualitySignature != '' ">individualitySignature = #{individualitySignature},</if>
      <if test="identity != null and identity != '' ">account.identity = #{identity},</if>
      <if test="salt != null and salt != '' ">salt = #{salt},</if>
      <if test="role != null and role != '' ">role = #{role},</if>
    </set>
    where accountID = #{accountID,jdbcType=INTEGER}
  </update>


  <select id="selectAccountLikeName" parameterType="String" resultMap="BaseResultMap">
    <include refid="selectAccountVo" />
    <where>
      <if test="name != null and name != ''">
        AND account.name like "%"#{name}"%"
      </if>
      <if test="name != null and name != ''">
        OR mailbox like "%"#{name}"%"
      </if>
      <if test="name != null and name != ''">
        OR nickname like "%"#{name}"%"
      </if>
    </where>
  </select>

  <select id="selectAccountByName" parameterType="String" resultMap="BaseResultMap">
    <include refid="selectAccountVo" />
    where account.name = #{name}
  </select>

  <select id="selectAccountByMailbox" parameterType="String" resultMap="BaseResultMap">
    <include refid="selectAccountVo" />
    where mailbox = #{mailbox}
  </select>

  <select id="checkNameUnique" parameterType="String" resultType="int">
		select count(1) from account where account.name = #{name}
  </select>

  <select id="checkMailboxUnique" parameterType="String" resultMap="BaseResultMap">
		select * from account where mailbox = #{mailbox}
  </select>

  <sql id="selectAccountVo">
    select accountID, account.name, mailbox, account.password, nickname, mobilePhone, sex, avatar,
    individualitySignature, account.identity, salt, role
    from account
    <!--
    left join sys_dept d on u.dept_id = d.dept_id
    left join sys_user_role ur on u.user_id = ur.user_id
    left join sys_role r on r.role_id = ur.role_id
    -->
  </sql>

  <select id="selectByName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select accountID, account.name, mailbox, account.password, nickname, mobilePhone, sex, avatar,
    individualitySignature, account.identity
    from account
    where account.name = #{name,jdbcType=CHAR}
  </select>
  <select id="selectByMailbox" parameterType="java.lang.String" resultMap="BaseResultMap">
    select accountID, account.name, mailbox, account.password, nickname, mobilePhone, sex, avatar,
    individualitySignature, account.identity
    from account
    where mailbox = #{mailbox,jdbcType=CHAR}
  </select>

  <select id="findRolesByName" parameterType="String" resultMap="AccountMap">
    SELECT a.*,r.*
    FROM account a
    LEFT JOIN account_role ar
    ON a.accountID=ar.accountID
    LEFT JOIN roles r
    ON ar.roleID=r.roleID
    WHERE a.name = #{username};
  </select>

</mapper>